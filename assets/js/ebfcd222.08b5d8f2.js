"use strict";(self.webpackChunkmarkdown_website=self.webpackChunkmarkdown_website||[]).push([[1405],{1425:(e,t,r)=>{r.r(t),r.d(t,{assets:()=>l,contentTitle:()=>i,default:()=>p,frontMatter:()=>o,metadata:()=>a,toc:()=>c});const a=JSON.parse('{"id":"gisce/varis/queries_locks","title":"Queries per resoldre bloquejos","description":"","source":"@site/docs/gisce/varis/queries_locks.md","sourceDirName":"gisce/varis","slug":"/gisce/varis/queries_locks","permalink":"/docs/gisce/varis/queries_locks","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"gisceSidebar","previous":{"title":"Manage Users in ATR Hub and ATR Docs","permalink":"/docs/gisce/varis/manage_users_atrdocs_atrhub"},"next":{"title":"Comandes utils","permalink":"/docs/gisce/varis/useful_commands"}}');var n=r(4848),s=r(8453);const o={},i="Queries per resoldre bloquejos",l={},c=[];function d(e){const t={code:"code",h1:"h1",header:"header",pre:"pre",...(0,s.R)(),...e.components};return(0,n.jsxs)(n.Fragment,{children:[(0,n.jsx)(t.header,{children:(0,n.jsx)(t.h1,{id:"queries-per-resoldre-bloquejos",children:"Queries per resoldre bloquejos"})}),"\n",(0,n.jsx)(t.pre,{children:(0,n.jsx)(t.code,{className:"language-sql",children:"with recursive l as (\n  select\n    pid, locktype, granted,\n    array_position(array['AccessShare','RowShare','RowExclusive','ShareUpdateExclusive','Share','ShareRowExclusive','Exclusive','AccessExclusive'], left(mode, -4)) m,\n    row(locktype, database, relation, page, tuple, virtualxid, transactionid, classid, objid, objsubid) obj\n  from pg_locks\n), pairs as (\n  select w.pid waiter, l.pid locker, l.obj, l.m\n  from l w join l on l.obj is not distinct from w.obj and l.locktype = w.locktype and not l.pid = w.pid and l.granted\n  where not w.granted\n  and not exists (select from l i where i.pid=l.pid and i.locktype = l.locktype and i.obj is not distinct from l.obj and i.m > l.m)\n), leads as (\n  select o.locker, 1::int lvl, count(*) q, array[locker] track, false as cycle\n  from pairs o\n  group by o.locker\n  union all\n  select i.locker, leads.lvl + 1, (select count(*) from pairs q where q.locker = i.locker), leads.track || i.locker, i.locker = any(leads.track)\n  from pairs i, leads\n  where i.waiter=leads.locker and not cycle\n), tree as (\n  select locker pid,locker dad,locker root,case when cycle then track end dl, null::record obj,0 lvl, locker::text path, array_agg(locker) over () all_pids\n  from leads o\n  where\n    (cycle and not exists (select from leads i where i.locker=any(o.track) and (i.lvl>o.lvl or i.q<o.q)))\n    or (not cycle and not exists (select from pairs where waiter=o.locker) and not exists (select from leads i where i.locker=o.locker and i.lvl>o.lvl))\n  union all\n  select w.waiter pid,tree.pid,tree.root,case when w.waiter=any(tree.dl) then tree.dl end,w.obj,tree.lvl+1,tree.path||'.'||w.waiter,all_pids || array_agg(w.waiter) over ()\n  from tree\n  join pairs w on tree.pid=w.locker and not w.waiter = any (all_pids)\n)\nselect (clock_timestamp() - a.xact_start)::interval(0) as transaction_age,\n  (clock_timestamp() - a.state_change)::interval(0) as change_age,\n  a.datname,\n  a.usename,\n  a.client_addr,\n  --w.obj wait_on_object,\n  tree.pid,\n  --(select array_to_json(array_agg(json_build_object(mode, granted))) from pg_locks pl where pl.pid = tree.pid) as locks,\n  a.wait_event_type,\n  a.wait_event,\n  pg_blocking_pids(tree.pid) blocked_by_pids,\n  replace(a.state, 'idle in transaction', 'idletx') state,\n  lvl,\n  (select count(*) from tree p where p.path ~ ('^'||tree.path) and not p.path=tree.path) blocking_others,\n  case when tree.pid=any(tree.dl) then '!>' else repeat(' .', lvl) end||' '||trim(left(regexp_replace(a.query, e'\\\\s+', ' ', 'g'),300)) latest_query_in_tx\nfrom tree\nleft join pairs w on w.waiter = tree.pid and w.locker = tree.dad\njoin pg_stat_activity a using (pid)\njoin pg_stat_activity r on r.pid=tree.root\norder by (now() - r.xact_start), path;\n\n\nSELECT pid, backend_start,query_start,age(clock_timestamp(), query_start)::text, usename, application_name, state, query\nFROM pg_stat_activity\nWHERE query NOT ILIKE '%pg_stat_activity%'\nAND age(clock_timestamp(), query_start) > interval '10 minutes'\nAND state = 'idle in transaction'\nORDER BY query_start asc;\n"})})]})}function p(e={}){const{wrapper:t}={...(0,s.R)(),...e.components};return t?(0,n.jsx)(t,{...e,children:(0,n.jsx)(d,{...e})}):d(e)}},8453:(e,t,r)=>{r.d(t,{R:()=>o,x:()=>i});var a=r(6540);const n={},s=a.createContext(n);function o(e){const t=a.useContext(s);return a.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(n):e.components||n:o(e.components),a.createElement(s.Provider,{value:t},e.children)}}}]);