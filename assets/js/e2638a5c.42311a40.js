"use strict";(self.webpackChunkmarkdown_website=self.webpackChunkmarkdown_website||[]).push([[9338],{1545:(e,a,t)=>{t.r(a),t.d(a,{assets:()=>l,contentTitle:()=>r,default:()=>o,frontMatter:()=>d,metadata:()=>n,toc:()=>u});const n=JSON.parse('{"id":"gisce/code/interest_procedures","title":"Procedures of Interest","description":"Index","source":"@site/docs/gisce/code/interest_procedures.md","sourceDirName":"gisce/code","slug":"/gisce/code/interest_procedures","permalink":"/docs/gisce/code/interest_procedures","draft":false,"unlisted":false,"tags":[],"version":"current","frontMatter":{},"sidebar":"gisceSidebar","previous":{"title":"Modificar linia de descompte de Bateria Virtual en cas de factura sense IESE","permalink":"/docs/gisce/Clients/modify_virtual_batery_line_in_fact"},"next":{"title":"Activar casos de forma massiva","permalink":"/docs/gisce/erp/activate_massive_atr"}}');var i=t(4848),s=t(8453);const d={},r="Procedures of Interest",l={},u=[{value:"Index",id:"index",level:2},{value:"Crear polissa en esborrany per canvi de titular M1",id:"crear-polissa-en-esborrany-per-canvi-de-titular-m1",level:2},{value:"Agrupar linies de factura",id:"agrupar-linies-de-factura",level:2}];function c(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",p:"p",pre:"pre",...(0,s.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"procedures-of-interest",children:"Procedures of Interest"})}),"\n",(0,i.jsx)(a.h2,{id:"index",children:"Index"}),"\n",(0,i.jsx)(a.h2,{id:"crear-polissa-en-esborrany-per-canvi-de-titular-m1",children:"Crear polissa en esborrany per canvi de titular M1"}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.code,{children:"addons/gisce/GISCEMaster/giscedata_switching/giscedata_switching_m1.py"})}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"if vals.get(\"new_contract_values\"):\n    ctx = context.copy()\n    ctx['from_atr'] = True\n    pol_obj = self.pool.get('giscedata.polissa')\n    pol_id = pol_obj.copy(\n        cursor, uid, pas.sw_id.cups_polissa_id.id,\n        default={\n            'observacions': _(u\"Duplicat procedent de canvi de titular ({0})\").format(datetime.today().strftime(\"%d-%m-%Y\"))\n        }, context=ctx\n    )\n"})}),"\n",(0,i.jsx)(a.h2,{id:"agrupar-linies-de-factura",children:"Agrupar linies de factura"}),"\n",(0,i.jsx)(a.p,{children:(0,i.jsx)(a.code,{children:"addons/gisce/GISCEMaster/giscedata_facturacio/giscedata_facturacio.py"})}),"\n",(0,i.jsxs)(a.p,{children:["En el ",(0,i.jsx)(a.code,{children:"giscedata.facturacio.factura.linia"})," en el ",(0,i.jsx)(a.code,{children:"create"}),":"]}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-python",children:"    def create(self, cursor, uid, values, context=None):\n        if not context:\n            context = {}\n        defaults = self.default_get(cursor, uid, ['price_unit_multi', 'multi', 'quantity'],\n                                    context)\n        values['invoice_id'] = \\\n            self.pool.get('giscedata.facturacio.factura').browse(\n                                cursor, uid,\n                                values['factura_id'], context={'prefetch': False}).invoice_id.id\n        price_unit_multi = values.get('price_unit_multi',\n                                      defaults['price_unit_multi'])\n        multi = values.get('multi', defaults['multi'])\n        values['price_unit'] = float_round(price_unit_multi * multi,\n                                           int(config['price_accuracy']))\n        query_file = ('%s/giscedata_facturacio/sql/query_factura_linia.sql'\n                      % config['addons_path'])\n        query = open(query_file).read()\n        parameters = [values['name'],\n                      values['factura_id'],\n                      values['tipus'],\n                      '%.6f' % values.get('price_unit_multi',\n                                 defaults['price_unit_multi']),\n                      values['product_id'] or 0]\n        if values['tipus'] == 'energia':\n            query += ' AND fl.multi = %s'\n            parameters.extend([values.get('multi', defaults['multi'])])\n        elif values['tipus'] == 'potencia':\n            query += ' AND il.quantity = %s'\n            parameters.extend([values.get('quantity', defaults['quantity'])])\n        # Only group lines before 2021/09/16\n        query += \" AND fl.data_desde != '2021-09-16' AND fl.data_fins != '2021-12-31'\"\n        group_line = context.get('group_line', True)\n        same_dates = False\n        linies_van_seguides = True  # inicialitzem a True per mantenir comportament per defecte\n        if group_line:\n            cursor.execute(query, tuple(parameters))\n            lids = [a[0] for a in cursor.fetchall()]\n            lines_data = self.read(cursor, uid, lids, ['data_desde', 'data_fins', 'tipus'])\n            if len(lines_data):\n                linies_van_seguides = False  # com que si que hi ha altres linies, haurem de revisar-ho\n            data_desde_list = [x['data_desde'] for x in lines_data]\n            data_fins_list = [x['data_fins'] for x in lines_data]\n            if values.get('data_desde', False):\n                data_desde_list.append(values['data_desde'])\n            if values.get('data_fins', False):\n                data_fins_list.append(values['data_fins'])\n            data_desde = min(data_desde_list) if data_desde_list else '2021-09-16'\n            data_fins = max(data_fins_list) if data_fins_list else '2021-09-01'\n            for line_data in lines_data:\n                same_dates = same_dates or values['data_desde'] == line_data['data_desde'] and values['data_fins'] == line_data['data_fins']\n                desde_anterior = (datetime.strptime(line_data['data_desde'], \"%Y-%m-%d\") - timedelta(days=1)).strftime(\"%Y-%m-%d\")\n                fins_posterior = (datetime.strptime(line_data['data_fins'], \"%Y-%m-%d\") + timedelta(days=1)).strftime(\"%Y-%m-%d\")\n                linies_van_seguides = linies_van_seguides or (desde_anterior == values['data_desde'] or desde_anterior == values['data_fins'] or fins_posterior == values['data_desde'] or fins_posterior == values['data_fins'])\n            prev_line = False\n            post_line = False\n            if values.get('data_desde', False) and values.get('data_fins', False):\n                prev_line = values['data_desde'] <= values['data_fins'] < '2021-09-16'\n                post_line = '2021-12-31' <= values['data_desde'] <= values['data_fins']\n            is_september_change = data_desde < '2021-09-16' and data_fins > '2021-09-15'\n            is_december_change = data_desde < '2022-01-01' and data_fins > '2021-12-31'\n            is_altres = 'altres' in values['tipus']\n        if (not linies_van_seguides or not group_line or not lids or (not prev_line and is_september_change and not is_altres) or (not post_line and is_december_change and not is_altres)) and not same_dates:\n            return super(GiscedataFacturacioFacturaLinia,\n                         self).create(cursor, uid, values, context)\n        categ_extra_id = self.pool.get('ir.model.data').get_object_reference(\n            cursor, uid, 'giscedata_facturacio', 'categ_extra'\n        )[1]\n        for linia in self.browse(cursor, uid, lids, context={'prefetch': False}):\n            # No agrupar l\xednies de productes de categoria extra\n            if (linia.product_id and linia.product_id.categ_id and\n                    linia.product_id.categ_id.id == categ_extra_id or context.get('dont_group_lines', False)):\n                return super(GiscedataFacturacioFacturaLinia, self).create(\n                    cursor, uid, values, context)\n            if (same_dates and values['data_desde'] == linia.data_desde and values['data_fins'] == linia.data_fins) or not same_dates:\n                values['data_desde'] = min(linia.data_desde, values['data_desde'])\n                values['data_fins'] = max(linia.data_fins, values['data_fins'])\n                if self.group_line_by_multi_and_quanity(cursor, uid, linia, context=context):\n                    values['quantity'] += linia.quantity\n                    values['multi'] += linia.multi\n                elif self.group_line_by_multi(cursor, uid, linia, context=context):\n                    values['multi'] += linia.multi\n                else:\n                    values['quantity'] += linia.quantity\n                if 'atrprice_subtotal' in values:\n                    values['atrprice_subtotal'] += linia.atrprice_subtotal\n                linia.write(values)\n                return linia.id\n"})})]})}function o(e={}){const{wrapper:a}={...(0,s.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,a,t)=>{t.d(a,{R:()=>d,x:()=>r});var n=t(6540);const i={},s=n.createContext(i);function d(e){const a=n.useContext(s);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function r(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),n.createElement(s.Provider,{value:a},e.children)}}}]);